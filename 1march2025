
/*
    Problem: Apply Operations on an Array

    Approach:
    1. Traverse the array and check if two consecutive elements are equal.
       - If they are equal, double the first element and set the second one to zero.
    2. Shift all non-zero elements to the front while maintaining their relative order.

    Time Complexity: O(N) - We iterate through the array twice.
    Space Complexity: O(1) - We modify the array in place.
*/

class Solution {
public:
    vector<int> applyOperations(vector<int>& nums) {
        int n = nums.size();
        
        // Step 1: Modify the array based on given conditions
        for(int i = 0; i < n - 1; i++) {
            if(nums[i] == nums[i + 1]) { 
                nums[i] = 2 * nums[i]; // Double the current element
                nums[i + 1] = 0;       // Set the next element to zero
            }
        }
        
        // Step 2: Move all non-zero elements to the front while maintaining their order
        
        // Find the first occurrence of zero in the array
        int j = -1; 
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                j = i; // Store the index of the first zero
                break;
            }
        }
        
        // If no zero is found, return the modified array
        if(j == -1) return nums;
        
        // Swap non-zero elements to bring them forward
        for(int i = j + 1; i < n; i++) {
            if(nums[i] != 0) {
                swap(nums[i], nums[j]); // Swap non-zero element with zero
                j++; // Move the zero pointer forward
            }
        }
        
        return nums;
    }
};
