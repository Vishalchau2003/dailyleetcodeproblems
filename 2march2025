*Problem Statement*
You are given two 2D integer arrays nums1 and nums2, where:

nums1[i] = [id_i, val_i] represents an id-value pair.
nums2[j] = [id_j, val_j] represents another id-value pair.
Both arrays are sorted in strictly ascending order by id.
Objective:
Merge both arrays such that:

Each unique id appears only once in the result.
If an id appears in both arrays, sum their values.
The result must be sorted in ascending order by id.
Constraints:
1 <= nums1.length, nums2.length <= 200
nums1[i].length == nums2[j].length == 2
1 <= id_i, val_i <= 1000
Both arrays contain unique ids and are sorted in ascending order.
Example

Example 1:
Input:
nums1 = [[1,2],[2,3],[4,5]];
nums2 = [[1,4],[3,2],[4,1]];
Output:
[[1,6],[2,3],[3,2],[4,6]]
Explanation:
id = 1 → 2 + 4 = 6
id = 2 → 3 (only in nums1)
id = 3 → 2 (only in nums2)
id = 4 → 5 + 1 = 6
Example 2:
Input:
nums1 = [[2,4],[3,6],[5,5]];
nums2 = [[1,3],[4,3]];
Output:
cpp
Copy
Edit
[[1,3],[2,4],[3,6],[4,3],[5,5]]
Explanation:
There are no common ids, so we just include each id with its value.

C++ Solution (Two-Pointer Approach)
cpp
Copy
Edit
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {
        int i = 0, j = 0;
        int n = nums1.size(), m = nums2.size();
        vector<vector<int>> ans;
        
        // Merge both sorted arrays using two pointers
        while (i < n && j < m) {
            if (nums1[i][0] == nums2[j][0]) {
                // If same id exists, sum values
                ans.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++; j++;
            } else if (nums1[i][0] < nums2[j][0]) {
                // If id in nums1 is smaller, add it
                ans.push_back({nums1[i][0], nums1[i][1]});
                i++;
            } else {
                // If id in nums2 is smaller, add it
                ans.push_back({nums2[j][0], nums2[j][1]});
                j++;
            }
        }

        // Add remaining elements from nums1
        while (i < n) {
            ans.push_back({nums1[i][0], nums1[i][1]});
            i++;
        }

        // Add remaining elements from nums2
        while (j < m) {
            ans.push_back({nums2[j][0], nums2[j][1]});
            j++;
        }

        return ans;
    }
};
*Approach*
1️⃣ Two-Pointer Merging Technique
Since both arrays are already sorted, we use a two-pointer approach to efficiently merge them.

If ids match → Sum values and move both pointers forward.
If nums1 has a smaller id → Add it to the result and move pointer i.
If nums2 has a smaller id → Add it to the result and move pointer j.
After merging, add remaining elements from either array.
⏳ Time Complexity:
O(N + M) → Since we traverse both arrays once.
🛠 Space Complexity:
O(N + M) → Storing the merged result.
